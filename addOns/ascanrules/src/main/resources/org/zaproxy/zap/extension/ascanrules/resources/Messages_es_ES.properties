ascanrules.desc = Release status active scan rules
ascanrules.name = Active Scan Rules

ascanrules.bufferoverflow.name = Buffer Overflow
ascanrules.bufferoverflow.desc = Los errores de Buffer Overflow se caracterizan por la sobrescritura de espacios de memoria del proceso web en segundo plano, que no deber\u00edan haber sido modificados, intencionadamente o no. Sobrescribir los valores de IP (Instruction Pointer), BP (Base Pointer) y otros registros causan excepciones, violaciones del segmento y otros errores. Normalmente estos errores terminan la ejecuci\u00f3n de la aplicaci\u00f3n de manera inseperada. 
ascanrules.bufferoverflow.soln = Reescribir el programa en segundo plano realizando una correcta comprobaci\u00f3n de la longitud de retorno. Esto requerir\u00e1 el recompilado del ejecutable en segundo plano.
ascanrules.bufferoverflow.refs = https\://owasp.org/www-community/attacks/Buffer_overflow_attack
ascanrules.bufferoverflow.other = Potencial desbordamiento de buffer. El script ha cerrado la conexi\u00f3n y ha lanzado un error interno del servidor 500

ascanrules.cloudmetadata.name = Cloud Metadata Potentially Exposed
ascanrules.cloudmetadata.desc = The Cloud Metadata Attack attempts to abuse a misconfigured NGINX server in order to access the instance metadata maintained by cloud service providers such as AWS, GCP and Azure.\n\
\n\
All of these providers provide metadata via an internal unroutable IP address '169.254.169.254' - this can be exposed by incorrectly configured NGINX servers and accessed by using this IP address in the Host header field.
ascanrules.cloudmetadata.otherinfo = Based on the successful response status code cloud metadata may have been returned in the response. Check the response data to see if any cloud metadata has been returned.\n\
\n\
The meta data returned can include information that would allow an attacker to completely compromise the system.
ascanrules.cloudmetadata.refs = https\://www.nginx.com/blog/trust-no-one-perils-of-trusting-user-input/
ascanrules.cloudmetadata.soln = Do not trust any user data in NGINX configs. In this case it is probably the use of the $host variable which is set from the 'Host' header and can be controlled by an attacker.

ascanrules.commandinjection.name=Remote OS Command Injection
ascanrules.commandinjection.desc=Attack technique used for unauthorized execution of operating system commands. This attack is possible when an application accepts untrusted input to build operating system commands in an insecure manner involving improper data sanitization, and/or improper calling of external programs.
ascanrules.commandinjection.refs=http\://cwe.mitre.org/data/definitions/78.html\n\
https\://owasp.org/www-community/attacks/Command_Injection
ascanrules.commandinjection.otherinfo.feedback-based=The scan rule was able to retrieve the content of a file or command by sending [{0}] to the operating system running this application
ascanrules.commandinjection.otherinfo.time-based=The scan rule was able to control the timing of the application response by sending [{0}] to the operating system running this application

ascanrules.elmah.name = Fuga de informaci\u00f3n ELMAH
ascanrules.elmah.desc = El Error Logging Modules and Handlers (ELMAH [elmah.axd]) M\u00f3dulo HTTP fue encontrado disponible. Este modulo puede tener fugas de una cantidad importante de informaci\u00f3n valiosa.
ascanrules.elmah.otherinfo = Basado en el c\u00f3digo de estado de respuesta ELMAH podr\u00eda estar protegida por un mecanismo de autenticaci\u00f3n o autorizaci\u00f3n.  
ascanrules.elmah.refs = https\://www.troyhunt.com/aspnet-session-hijacking-with-google/\n\
https\://www.nuget.org/packages/elmah\n\
https\://elmah.github.io/
ascanrules.elmah.soln = Considere si o no ELMAH es actualmente requerido en la producci\u00f3n, si no es as\u00ed entonces deshabilitarlo. Si s\u00ed es entonces asegurar el acceso a el requiere autenticaci\u00f3n y autorizaci\u00f3n. Vea tambi\u00e9n\: https\://elmah.github.io/a/securing-error-log-pages/

ascanrules.envfiles.name = .env Information Leak
ascanrules.envfiles.desc = One or more .env files seems to have been located on the server. These files often expose infrastructure or administrative account credentials, API or APP keys, or other sensitive configuration information. 
ascanrules.envfiles.otherinfo = Based on response status code the .env file may be protected by an authentication or authorization mechanism.
ascanrules.envfiles.refs = https\://www.google.com/search?q\=db_password+filetype%3Aenv\n\
https\://mobile.twitter.com/svblxyz/status/1045013939904532482
ascanrules.envfiles.soln = Ensure the .env file is not accessible.

ascanrules.formatstring.name=Error de formato de cadena
ascanrules.formatstring.desc=Un error de formato de cadena ocurre cuando los datos de una cadena de entrada es evaluada como un comando por la aplicaci\u00f3n. 
ascanrules.formatstring.soln= Reescribir el programa en segundo plano usando un borrado apropiado de las cadenas de caracteres err\u00f3neas. Esto requerir\u00e1 el recompilado del ejecutable en segundo plano.
ascanrules.formatstring.refs=https\://owasp.org/www-community/attacks/Format_string_attack
ascanrules.formatstring.error1 = Potencial error de formato de cadena. El script cerr\u00f3 la conexi\u00f3n en /%s
ascanrules.formatstring.error2 = Potencial error de formato de cadena. El script cerr\u00f3 la conexi\u00f3n en /%s y /%x
ascanrules.formatstring.error3 = Potencial error de formato de cadena. El script cerr\u00f3 la conexi\u00f3n en una cadena de formato de error de microsoft

ascanrules.getforpost.name=GET for POST
ascanrules.getforpost.desc=A request that was originally observed as a POST was also accepted as a GET. This issue does not represent a security weakness unto itself, however, it may facilitate simplification of other attacks. For example if the original POST is subject to Cross-Site Scripting (XSS), then this finding may indicate that a simplified (GET based) XSS may also be possible.
ascanrules.getforpost.soln=Ensure that only POST is accepted where POST is expected.

ascanrules.heartbleed.name=Vulnerabilidades de OpenSLL HeartBleed
ascanrules.heartbleed.desc=La implementaci\u00f3n de TLS en OpenSSL 1.0.1 antes de 1.0.1g, no maneja adecuadamente los paquetes de extensi\u00f3n de latido, lo que permite a los atacantes remotos obtener informaci\u00f3n confidencial de la memoria de proceso mediante paquetes hechos a mano que desencadenan un b\u00fafer de lectura excesiva, para potencialmente revelar informaci\u00f3n confidencial.
ascanrules.heartbleed.soln=Actualice a OpenSSL 1.0. 1g o luego. Vuelva a emitir los certificados de HTTPS. Modificar las claves que son privadas y asim\u00e9tricas y tambi\u00e9n las claves secretadas compartidas, ya que estos pueden estar comprometidos, sin evidencia de compromiso en los archivos de registro del servidor.
ascanrules.heartbleed.refs=http\://cvedetails.com/cve-details.php?t\=1&cve_id\=CVE-2014-0160
ascanrules.heartbleed.extrainfo=Este problema se confirm\u00f3 mediante la recopilaci\u00f3n de datos del servidor, utilizando{0}. Es poco probable que sea un falso positivo.

ascanrules.hidden.files.name = Hidden File Finder
ascanrules.hidden.files.alert.name = Hidden File Found
ascanrules.hidden.files.desc = A sensitive file was identified as accessible or available. This may leak administrative, configuration, or credential information which can be leveraged by a malicious individual to further attack the system or conduct social engineering efforts.
ascanrules.hidden.files.otherinfo = {0}
ascanrules.hidden.files.refs = https\://blog.hboeck.de/archives/892-Introducing-Snallygaster-a-Tool-to-Scan-for-Secrets-on-Web-Servers.html
ascanrules.hidden.files.soln = Consider whether or not the component is actually required in production, if it isn't then disable it. If it is then ensure access to it requires appropriate authentication and authorization, or limit exposure to internal systems or specific source IPs, etc.

ascanrules.htaccess.name = .htaccess Information Leak
ascanrules.htaccess.desc = htaccess files can be used to alter the configuration of the Apache Web Server software to enable/disable additional functionality and features that the Apache Web Server software has to offer. 
ascanrules.htaccess.otherinfo = Based on response status code htaccess file may be protected by an authentication or authorization mechanism.
ascanrules.htaccess.refs = http\://www.htaccess-guide.com/
ascanrules.htaccess.soln = Ensure the .htaccess file is not accessible.

ascanrules.paddingoracle.name=Relleno gen\u00e9rico del Or\u00e1culo
ascanrules.paddingoracle.desc=By manipulating the padding on an encrypted string, an attacker is able to generate an error message that indicates a likely 'padding oracle' vulnerability. Such a vulnerability can affect any application or framework that uses encryption improperly, such as some versions of ASP.net, Java Server Faces, and Mono. An attacker may exploit this issue to decrypt data and recover encryption keys, potentially viewing and modifying confidential data. This rule should detect the MS10-070 padding oracle vulnerability in ASP.net if CustomErrors are enabled for that.
ascanrules.paddingoracle.soln=Debe actualizar el software del servidor que ha sido afectado o sino modificar las secuencias de comandos para as\u00ed validar correctamente los datos cifrados, antes de volver a intentar el descifrado.
ascanrules.paddingoracle.refs=http\://netifera.com/research/ \n\
http\://www.microsoft.com/technet/security/bulletin/ms10-070.mspx \n\
http\://www.mono-project.com/Vulnerabilities\#ASP.NET_Padding_Oracle \n\
https\://bugzilla.redhat.com/show_bug.cgi?id\=623799

ascanrules.payloader.desc=Provides support for custom payloads in scan rules.
ascanrules.payloader.name=Active Scan Rules Custom Payloads

ascanrules.remotecodeexecution.cve-2012-1823.name = Ejecuci\u00f3n remota de c\u00f3digo - CVE-2012-1823
ascanrules.remotecodeexecution.cve-2012-1823.desc = Ciertas versiones de PHP, cuando se configuran para ejecutarse mediante CGI, no manejan correctamente las cadenas de consulta que carecen de un car\u00e1cter "\=", lo que permite la ejecuci\u00f3n arbitraria de c\u00f3digo. En este caso, un comando del sistema operativo fue causado para ser ejecutado en el servidor web, y los resultados fueron devueltos al navegador web. 
ascanrules.remotecodeexecution.cve-2012-1823.soln = Actualice a la \u00faltima versi\u00f3n estable de PHP, o utilice el servidor web Apache y el m\u00f3dulo mod_rewrite para filtrar solicitudes maliciosas mediante las directivas "RewriteCond" y "RewriteRule".

ascanrules.sourcecodedisclosurecve-2012-1823.name = Divulgaci\u00f3n del c\u00f3digo fuente - CVE-2012-1823
ascanrules.sourcecodedisclosurecve-2012-1823.desc = Existen versiones de PHP, que cuando est\u00e1n configuradas para ejecutarse con CGI, no pueden manejar de manera correcta las cadenas de consulta, que no cuentan con el car\u00e1cter "\=", permitiendo as\u00ed que c\u00f3digo fuente de PHP sea revelado, adem\u00e1s de la ejecuci\u00f3n de cualquier c\u00f3digo. En casos como este se sirvieron directamente en el navegador web los contenidos del archivo PHP. Esta salida seguramente contendr\u00e1 PHP, pero tambi\u00e9n pudiera contener HTML directo.
ascanrules.sourcecodedisclosurecve-2012-1823.soln = Actualice a la \u00faltima versi\u00f3n estable de PHP, o utilice el servidor web Apache y el m\u00f3dulo mod_rewrite para filtrar solicitudes maliciosas mediante las directivas "RewriteCond" y "RewriteRule".


ascanrules.sourcecodedisclosurewebinf.name = Divulgaci\u00f3n del c\u00f3digo fuente - / carpeta WEB-INF
ascanrules.sourcecodedisclosurewebinf.desc = El c\u00f3digo fuente de Java fue revelado por el servidor web en los archivos del Java class en la carpeta Web-INF. Los archivos class se pueden desmontar para producir c\u00f3digo fuente que coincida muy de cerca con el c\u00f3digo fuente original.  
ascanrules.sourcecodedisclosurewebinf.soln = Todo servidor web se debe configurar para que no muestre la carpeta /WEB-INF ni sus contenidos a los navegadores web, porque este tiene informaci\u00f3n delicada como el c\u00f3digo fuente compilado de Java, adem\u00e1s de archivos que pueden contener credenciales como los de propiedades. Los Java class implementados con la aplicaci\u00f3n se deben ocultar, en forma de una capa adicional de defensa, como una "defensa en profundidad".
ascanrules.sourcecodedisclosurewebinf.propertiesfile.name = Caracter\u00edsticas del archivo de propiedades - carpeta /WEB-INF
ascanrules.sourcecodedisclosurewebinf.propertiesfile.desc = Un Java class de la carpeta /Web-INF divulg\u00f3 la presencia del archivo de propiedades. El archivo de propiedades no est\u00e1 dise\u00f1ado para ser p\u00fablicamente accesible, y com\u00fanmente contiene la informaci\u00f3n de configuraci\u00f3n, credenciales de aplicaci\u00f3n o claves criptogr\u00e1ficas.   
ascanrules.sourcecodedisclosurewebinf.propertiesfile.soln = El servidor web debe configurarse para que no sirva la carpeta / WEB-INF o sus contenidos a los navegadores web. Tambi\u00e9n es posible eliminar la carpeta / WEB-INF.  
ascanrules.sourcecodedisclosurewebinf.propertiesfile.extrainfo = La referencia al archivo de propiedades se encontr\u00f3 en el c\u00f3digo fuente de Java desarmado para la clase Java [{0}].


ascanrules.crosssitescripting.name = Cross Site Scripting (Reflected)
ascanrules.crosssitescripting.json.name = Cross Site Scripting Weakness (Reflected in JSON Response)
ascanrules.crosssitescripting.json.desc = A XSS attack was reflected in a JSON response, this might leave content consumers vulnerable to attack if they don't appropriately handle the data (response).
ascanrules.crosssitescripting.otherinfo.nothtml = Raised with LOW confidence as the Content-Type is not HTML
ascanrules.crosssitescripting.otherinfo.accesskey = The accesskey attribute specifies a shortcut key to activate/focus an element. This attribute can trigger payloads for non-conventional or custom tags.

ascanrules.persistentxssattack.name=Cross Site Scripting (Persistent)
ascanrules.persistentxssattack.otherinfo=Source URL\: {0}
ascanrules.persistentxssattack.json.name = Cross Site Scripting Weakness (Persistent in JSON Response)
ascanrules.persistentxssattack.json.desc = Se encontr\u00f3 un ataque XSS en una respuesta JSON, esto podr\u00eda dejar a los usuarios del contenido vulnerables a un ataque si no controlan adecuadamente los datos (respuesta).
ascanrules.persistentxssattack.otherinfo.nothtml = Iniciado con POCA confianza, ya que el contenido (Content-Type) no es HTML

ascanrules.persistentxssprime.name=Cross Site Scripting (Persistente) - Prime
ascanrules.persistentxssprime.misc=N/A

ascanrules.persistentxssspider.name=Cross Site Scripting (Persistente) - Spider
ascanrules.persistentxssspider.misc=N/A

ascanrules.sqlinjection.name=Falla por Inyecci\u00f3n SQL
ascanrules.sqlinjection.desc=Falla por Inyecci\u00f3n SQL puede ser posible
ascanrules.sqlinjection.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.alert.errorbased.attack=[{0}] campo\: [{1}], valor [{2}]
ascanrules.sqlinjection.alert.errorbased.differentiation.attack=Valor Original\: [{0}]. Valor Modificado\: [{1}]. Valor de Control\: [{2}]
ascanrules.sqlinjection.alert.booleanbased.attack=campo\: [{0}], valor [{1}]
ascanrules.sqlinjection.alert.unionbased.attack=[{0}] campo\: [{1}], valor [{2}]
ascanrules.sqlinjection.alert.errorbased.extrainfo=RDBMS [{0}] probable, dado fragmento del mensaje de error [{1}] en resultados HTML
ascanrules.sqlinjection.alert.unionbased.extrainfo=RDBMS [{0}] probable, dado fragmento [{1}] del mensaje tipo UNION en resultados HTML
ascanrules.sqlinjection.alert.expressionbased.extrainfo=The original page results were successfully replicated using the expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.orderbybased.extrainfo=The original page results were successfully replicated using the "ORDER BY" expression [{0}] as the parameter value\n\
The parameter value being modified was {1}stripped from the HTML output for the purposes of the comparison
ascanrules.sqlinjection.alert.errorbased.httpstatuscode.extrainfo=Mensaje no modificado retorn\u00f3 estado HTTP [{0}], mensaje modificado retorn\u00f3 estado HTTP [{1}]
ascanrules.sqlinjection.alert.errorbased.differentiation.extrainfo=Mensaje no modificado retorn\u00f3 estado HTTP [{0}] y longitud [{1}]; Mensaje modificado retorn\u00f3 estado HTTP [{2}] y longitud [{3}]. Un tercer mensaje (con valor sin inyecci\u00f3n SQL) retorn\u00f3 estado HTTP [{4}] y longitud [{5}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo=Los resultados de la p\u00e1gina fueron manipulados con \u00e9xito usando las condiciones l\u00f3gicas [{0}] y [{1}]
ascanrules.sqlinjection.alert.booleanbased.extrainfo.dataexists=Data was returned for the original parameter.\n\
The vulnerability was detected by successfully restricting the data originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.booleanbased.extrainfo.datanotexists=Data was NOT returned for the original parameter.\n\
The vulnerability was detected by successfully retrieving more data than originally returned, by manipulating the parameter
ascanrules.sqlinjection.alert.timebased.extrainfo=El tiempo de consulta es controlable a trav\u00e9s del valor del par\u00e1metro [{0}], el cual caus\u00f3 que la solicitud tomara [{1}] milisegundos, mientras que la consulta original, no modificada, tom\u00f3 [{2}] [{3}] milisegundos 
ascanrules.sqlinjection.authbypass.name=SQL Injection - Authentication Bypass
ascanrules.sqlinjection.authbypass.desc=SQL injection may be possible on a login page, potentially allowing the application's authentication mechanism to be bypassed 

# TODO some duplicates

ascanrules.sqlinjection.mysql.name=Inyecci\u00f3n SQL - MySQL
ascanrules.sqlinjection.hypersonic.name=Inyecci\u00f3n SQL - SQL hipers\u00f3nico
ascanrules.sqlinjection.oracle.name=Inyecci\u00f3n SQL - Or\u00e1culo
ascanrules.sqlinjection.postgres.name=Inyecci\u00f3n SQL - PostgreSQL
#ascanrules.sqlinjection.alert.errorbased.attack={1}

ascanrules.sqlinjection.mssql.name=SQL Injection - MsSQL
ascanrules.sqlinjection.mssql.desc=Falla por Inyecci\u00f3n SQL puede ser posible
ascanrules.sqlinjection.mssql.soln=Do not trust client side input, even if there is client side validation in place. \n\
In general, type check all data on the server side.\n\
If the application uses JDBC, use PreparedStatement or CallableStatement, with parameters passed by '?'\n\
If the application uses ASP, use ADO Command Objects with strong type checking and parameterized queries.\n\
If database Stored Procedures can be used, use them.\n\
Do *not* concatenate strings into queries in the stored procedure, or use 'exec', 'exec immediate', or equivalent functionality\!\n\
Do not create dynamic SQL queries using simple string concatenation.\n\
Escape all data received from the client.\n\
Apply an 'allow list' of allowed characters, or a 'deny list' of disallowed characters in user input.\n\
Apply the privilege of least privilege by using the least privileged database user possible.\n\
In particular, avoid using the 'sa' or 'db-owner' database users. This does not eliminate SQL injection, but minimizes its impact.\n\
Grant the minimum database access that is necessary for the application.
ascanrules.sqlinjection.mssql.refs=https\://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html
ascanrules.sqlinjection.mssql.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, when the original unmodified query with value [{2}] took [{3}] milliseconds.

ascanrules.sqlinjection.sqlite.name=SQL Injection - SQLite
ascanrules.sqlinjection.sqlite.alert.timebased.extrainfo=The query time is controllable using parameter value [{0}], which caused the request to take [{1}] milliseconds, parameter value [{2}], which caused the request to take [{3}] milliseconds, when the original unmodified query with value [{4}] took [{5}] milliseconds.
ascanrules.sqlinjection.sqlite.alert.errorbased.extrainfo=The following known SQLite error message was provoked\: [{0}].
ascanrules.sqlinjection.sqlite.alert.versionnumber.extrainfo=Using a UNION based SQL Injection attack, and by exploiting SQLite''s dynamic typing mechanism, the SQLite version was determined to be [{0}].\n\
With string-based injection points, full SQLite version information can be extracted, but with numeric injection points, only partial SQLite version information can be extracted.\n\
More information on SQLite version [{0}] is available at http\://www.sqlite.org/changes.html


ascanrules.externalredirect.name=Redirecci\u00f3n Externa
ascanrules.externalredirect.reason.location.header=The response contains a redirect in its Location header which allows an external Url to be set.
ascanrules.externalredirect.reason.location.meta=The response contains a redirect in its meta http-equiv tag for 'Location' which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.header=The response contains a redirect in its Refresh header which allows an external Url to be set.
ascanrules.externalredirect.reason.refresh.meta=The response contains a redirect in its meta http-equiv tag for 'Refresh' which allows an external Url to be set.
ascanrules.externalredirect.reason.javascript=The response contains a redirect in its JavaScript code which allows an external Url to be set.
ascanrules.externalredirect.reason.notfound=No reason found for it...

ascanrules.codeinjection.name=Server Side Code Injection
ascanrules.codeinjection.name.asp=Server Side Code Injection - ASP Code Injection
ascanrules.codeinjection.name.php=Server Side Code Injection - PHP Code Injection
ascanrules.codeinjection.desc=A code injection may be possible including custom code that will be evaluated by the scripting engine
ascanrules.codeinjection.soln=Do not trust client side input, even if there is client side validation in place.\n\
In general, type check all data on the server side and escape all data received from the client.\n\
 Avoid the use of eval() functions combined with user input data.
ascanrules.codeinjection.refs=http\://cwe.mitre.org/data/definitions/94.html\n\
https\://owasp.org/www-community/attacks/Direct_Dynamic_Code_Evaluation_Eval%20Injection

ascanrules.directorybrowsing.name=Exploraci\u00f3n de directorios
ascanrules.directorybrowsing.desc=It is possible to view the directory listing.  Directory listing may reveal hidden scripts, include files, backup source files, etc. which can be accessed to read sensitive information.
ascanrules.directorybrowsing.soln=Disable directory browsing.  If this is required, make sure the listed files does not induce risks.
ascanrules.directorybrowsing.refs=http\://httpd.apache.org/docs/mod/core.html\#options\n\
http\://alamo.satlug.org/pipermail/satlug/2002-February/000053.html

ascanrules.crlfinjection.name=CRLF Injection
ascanrules.crlfinjection.desc=Cookie can be set via CRLF injection.  It may also be possible to set arbitrary HTTP response headers. In addition, by carefully crafting the injected response using cross-site script, cache poisoning vulnerability may also exist.
ascanrules.crlfinjection.soln=Type check the submitted parameter carefully.  Do not allow CRLF to be injected by filtering CRLF.
ascanrules.crlfinjection.refs=http\://www.watchfire.com/resources/HTTPResponseSplitting.pdf\n\
http\://webappfirewall.com/lib/crlf-injection.txtnull\n\
http\://www.securityfocus.com/bid/9804

ascanrules.parametertamper.name=Parameter Tampering
ascanrules.parametertamper.desc=Parameter manipulation caused an error page or Java stack trace to be displayed.  This indicated lack of exception handling and potential areas for further exploit.
ascanrules.parametertamper.soln=Identify the cause of the error and fix it.  Do not trust client side input and enforce a tight check in the server side.  Besides, catch the exception properly.  Use a generic 500 error page for internal server error.

ascanrules.pathtraversal.name=Path Traversal
ascanrules.pathtraversal.other=Check {0}

ascanrules.remotefileinclude.name=Inclusi\u00f3n Remota de Archivos

ascanrules.serversideinclude.name=Server Side Include
ascanrules.serversideinclude.desc=Certain parameters may cause Server Side Include commands to be executed.  This may allow database connection or arbitrary code to be executed.
ascanrules.serversideinclude.soln=Do not trust client side input and enforce a tight check in the server side.  Disable server side includes.\n\

Refer=el manual para desactivar el Server Side Include (SSI).\n\
\n\
Utilice privilegios m\u00ednimos para ejecutar el servidor web o servidor de aplicaciones.\n\
\n\
Para Apache, deshabilitar lo siguiente\:\n\
\n\
Las opciones de \u00edndices incluye FollowSymLinks\n\
\n\
Agregar el tipo application/x-httpd-cgi .cgi\n\
\n\
Agregar el tipo text/x-server-parsed-html .html\n\

ascanrules.serversideinclude.refs=http\://www.carleton.ca/~dmcfet/html/ssi.html

ascanrules.traceaxd.name = Trace.axd Information Leak
ascanrules.traceaxd.desc = The ASP.NET Trace Viewer (trace.axd) was found to be available. This component can leak a significant amount of valuable information.
ascanrules.traceaxd.otherinfo = Based on response status code Trace Viewer may be protected by an authentication or authorization mechanism.  
ascanrules.traceaxd.refs = https\://msdn.microsoft.com/en-us/library/bb386420.aspx\n\
https\://msdn.microsoft.com/en-us/library/wwh16c6c.aspx\n\
https\://www.dotnetperls.com/trace
ascanrules.traceaxd.soln = Consider whether or not Trace Viewer is actually required in production, if it isn't then disable it. If it is then ensure access to it requires authentication and authorization.

ascanrules.useragent.name=User Agent Fuzzer
ascanrules.useragent.desc=Check for differences in response based on fuzzed User Agent (eg. mobile sites, access as a Search Engine Crawler). Compares the response statuscode and the hashcode of the response body with the original response.
ascanrules.useragent.refs=https\://owasp.org/wstg
ascanrules.useragent.useragentparmname=Header User-Agent

ascanrules.xsltinjection.name = XSLT Injection
ascanrules.xsltinjection.desc = Injection using XSL transformations may be possible, and may allow an attacker to read system information, read and write files, or execute arbitrary code.
ascanrules.xsltinjection.refs = https\://www.contextis.com/blog/xslt-server-side-injection-attacks
ascanrules.xsltinjection.soln = Sanitize and analyze every user input coming from any client-side.
ascanrules.xsltinjection.error.otherinfo = The response to sending an XSLT token included error messages that may indicate a vulnerability to XSLT injections.
ascanrules.xsltinjection.vendor.otherinfo = The XSLT processor vendor name "{0}" was returned after an injection request.
ascanrules.xsltinjection.portscan.otherinfo = Port scanning may be possible.
ascanrules.xsltinjection.command.otherinfo = Command execution may be possible.

ascanrules.xxe.name=XML External Entity Attack

